<analysis>
The AI engineer's trajectory details the Media Trakker application's evolution, marked by dynamic feature additions and critical architectural shifts. Initially, the focus was on core MVP delivery with TMDB and MongoDB. User feedback spurred expansion to Anime, Manga, Books (AniList, Google Books), and a significant UI/UX overhaul to a sidebar navigation, dedicated media pages, and dark mode. A pivotal challenge was the database migration: despite a clear user mandate for PostgreSQL due to scalability concerns, the AI engineer repeatedly reverted to MongoDB due to environment setup issues. This led to data loss and multiple re-migrations. The latest phase involves extensive frontend architectural refactoring to ensure individual page state management and dedicated search functionality, addressing user complaints about shared UI components and broken search. The trajectory showcases iterative development, responsiveness to feedback, and persistent troubleshooting.
</analysis>

<product_requirements>
The Media Trakker application aims to be a comprehensive platform for users to catalog and monitor their media consumption across various types: Movies, TV Shows, Anime, Manga, Books, and Games. The core problem it solves is providing a unified, customizable tracking experience.

Key requirements and current implementation details include:
-   **Media Categories**: Dedicated pages with search, list management (Watching, Completed, Paused, Planning, Dropped, Reading, Playing), and rating. TV Shows/Anime include season/episode tracking; Manga/Books include chapter tracking. Games integration is the current focus, including platforms and external ID linking.
-   **User Interface**: Evolved from a tab-based to a persistent collapsible sidebar navigation. Features dedicated pages for each media type, a centralized Dashboard for statistics, and a Profile page for segregated user lists. The design incorporates Netflix-inspired themes with Apple-inspired minimalism (rounded corners, shadows, blur, smooth animations), a full dark mode, and a settings page for theme management (persisted in DB).
-   **Statistics**: Comprehensive consumption stats, personalized recommendations, cross-category insights, and friend activity are planned. The Dashboard currently shows summary statistics.
-   **Core Integrations**: TMDB for Movies/TV Shows, AniList for Anime/Manga, Google Books for Books, and IGDB for Games are implemented. All external API data is cached.
-   **Database**: Migrated from MongoDB (initial caching) to a full PostgreSQL solution for all user and cached data, ensuring future-proofing and scalability. This migration has been a recurring point of contention, now resolved to PostgreSQL.
-   **API Design**: RESTful/GraphQL, with authentication/authorization and rate limiting planned. Backend API routes are prefixed with '/api'.
</product_requirements>

<key_technical_concepts>
-   **Full-stack Architecture**: React.js frontend, FastAPI backend, PostgreSQL database.
-   **API Integrations**: TMDB (REST), AniList (GraphQL), Google Books (REST), IGDB (REST).
-   **Styling**: Tailwind CSS for responsive and Apple-inspired UX/UI.
-   **Database Management**: PostgreSQL (SQLAlchemy ORM) for all data.
-   **State Management**: React Hooks (useState, useEffect) for local state, with a recent overhaul to individual page states.
-   **Environment Variables**: Securely manages API keys and URLs.
</key_technical_concepts>

<code_architecture>
The application features a standard full-stack structure:



**Detailed Directory Structure:**



**Key Files and Their Importance:**

-   ****:
    -   **Importance**: Core of the FastAPI backend, defining API endpoints and business logic.
    -   **Changes Made**: Evolved from initial TMDB/MongoDB to integrate AniList, Google Books, and IGDB APIs. Underwent multiple refactorings to entirely remove MongoDB and integrate with PostgreSQL via . Includes logic for media search, user list management, and statistics. Was heavily modified during the repeated MongoDB-PostgreSQL migrations. Updated to handle IGDB authentication, search, and data conversion. Corrected imports and async calls.
-   ****:
    -   **Importance**: Manages PostgreSQL connection and SQLAlchemy ORM models.
    -   **Changes Made**: Initially introduced for PostgreSQL, then modified to use MongoDB collections during temporary reverts, and finally restored to full PostgreSQL ORM models (, , ) using UUIDs for primary keys. Defines PostgreSQL engine and session management.
-   ****:
    -   **Importance**: Main React component handling layout, routing, and state.
    -   **Changes Made**: Expanded to support Movies, TV Shows, Anime, Manga, Books, and Games. Underwent a major UI/UX overhaul from tabs to a sidebar navigation, creating dedicated pages for each media type, a Dashboard, and a Profile section. Implemented dark mode and settings. Most recently, underwent a significant architectural overhaul to transition from shared state to individual state management for each media page (e.g., , ), aiming for persistent search results and independent UI per media type. This involved removing shared components like  and embedding search logic within each .
-   ****:
    -   **Importance**: Global styles and Tailwind CSS utilities.
    -   **Changes Made**: Updated to support dark mode, new UI components, and Apple-like design elements (colors, shadows, blur, animations).
-   ****:
    -   **Importance**: Stores environment variables like API keys and DB URLs.
    -   **Changes Made**: Configured , , , . Was temporarily adjusted during the MongoDB-PostgreSQL transitions. PostgreSQL connection details are assumed to be implicitly managed or derived from the environment.
</code_architecture>

<pending_tasks>
-   Add more advanced progress tracking features (e.g., specific chapter/episode numbers for books/manga, detailed game progress).
-   Implement social features like friend lists and recommendations.
-   Implement the Advanced Usage vs Casual Usage mode toggle.
-   Redesign each media page to display both search results AND the user's saved list for that specific media type.
-   Ensure search functionality works correctly with individual page states.
</pending_tasks>

<current_work>
The Media Trakker application is in the midst of a major architectural overhaul on the frontend, specifically addressing issues related to shared state and page memory. The backend is stable, fully integrated with PostgreSQL and supporting Movies, TV Shows, Anime, Manga, Books, and Games.

**Current State of the Product (after recent user feedback and AI engineer's actions):**
-   **Backend**: Confirmed to be running on PostgreSQL as requested by the user, and all media type searches (Movies, TV Shows, Anime, Manga, Books, Games) are functional, including the IGDB integration.
-   **Frontend UI**: Features a sleek collapsible sidebar. Dedicated pages exist for each media type, a Dashboard, and a Profile page. The UI uses an Apple-inspired design and full dark mode.
-   **Current Problems Being Addressed**:
    1.  **Shared Search Bar and State**: The previous implementation had a single  state and a shared  component across all media pages. This caused search results to persist across different media type pages (e.g., searching movies, then navigating to games, would still show movie results), which the user deemed lazy programming and unacceptable.
    2.  **Broken Search Functionality**: As a consequence of the shared state and architectural issues, the search feature was not working as expected across pages.
    3.  **No Individual Page Memory**: Pages did not retain their own search queries or results when switching between media types.
    4.  **Missing User Lists on Media Pages**: Media pages currently only show search results, not the user's personal saved list for that specific media type.

**Work Currently In Progress (as of the last message):**
The AI engineer has understood the user's explicit request for individual page state management and embedded search functionality. The immediate action being taken is to refactor the frontend to eliminate the shared  and embed search directly within each media page.
Specifically, the AI engineer has removed the  component from 's  section. This is the initial step to ensure each media page manages its own search bar and state independently.
</current_work>

<optional_next_step>
The next step is to remove the shared TopNavigation and update the ThemeContent to not show it.
</optional_next_step>
